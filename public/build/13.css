
.img-container[data-v-78f5e237] {
  margin: 6rem 0;
  padding: 5rem;
  display: flex;
  justify-content: center;
}
.custom-select[data-v-78f5e237] {
  margin: 10px 0;
}
.loop-container[data-v-78f5e237] {
  padding: 3rem;
}




/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/